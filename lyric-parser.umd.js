var c=Object.defineProperty;var o=(t,n,l)=>n in t?c(t,n,{enumerable:!0,configurable:!0,writable:!0,value:l}):t[n]=l;var r=(t,n,l)=>(o(t,typeof n!="symbol"?n+"":n,l),l);(function(t,n){typeof exports=="object"&&typeof module!="undefined"?module.exports=n():typeof define=="function"&&define.amd?define(n):(t=typeof globalThis!="undefined"?globalThis:t||self,t.LyricParser=n())})(this,function(){"use strict";var t;(function(s){s[s.stop=0]="stop",s[s.playing=1]="playing"})(t||(t={}));function n(s){return s=s.map((i,e)=>e>=1&&e<=3?parseInt(i):i),Date.now()+s[1]*60*1e3+s[2]*1e3+s[3]}const l=/\[(\d{2}):(\d{2}).(\d{2,3})]/g;class a{constructor(i,e){r(this,"lines");r(this,"lrc");r(this,"state");r(this,"curLine");r(this,"toggleTime");r(this,"timer");r(this,"handler");this.lrc=i,this.lines=[],this.state=t.stop,this.curLine=0,this.timer=null,this.toggleTime=Date.now(),this.handler=e,this._init()}_init(){this._initLines()}_initLines(){this.lrc.split(`
`).forEach(i=>{let e=l.exec(i);!e||this.lines.push({lineTime:n(e),txt:i.replace(l,"")})}),this.lines.sort((i,e)=>i.lineTime-e.lineTime)}_playReset(i,e){this.curLine=e;let h=this._calculateDelay();this.timer=setTimeout(()=>{if(this._callHandler(),this.curLine++,this.curLine<this.lines.length)this._playReset(i,this.curLine);else{stop();return}},h)}play(i,e){this.state!==t.playing&&(!this.lines.length||(i||(i=0),e||(e=this.curLine),i+=this.toggleTime,this.state=t.playing,this._fixLinesTime(),this._playReset(i,e)))}seek(i){this.stop();let e=0;i+=this.toggleTime,this.lines.forEach((h,u)=>{i>=this._findLine(u-1).lineTime&&i<=h.lineTime&&(e=u)}),i=this._findLine(e).lineTime-i,this.play(i,e)}stop(){this.state!==t.stop&&(clearTimeout(this.timer),this.state=t.stop,this._fixLinesTime())}togglePlay(){this.state===t.playing?this.stop():this.play(this.lines[this.curLine].lineTime),this.state=!this.state}_callHandler(){let i=this.curLine;if(!(i<0)){if(i>=this.lines.length){stop();return}this.handler({curLineNum:i,txt:this._findCur().txt.trim()})}}_calculateDelay(){let i=this._findCur().lineTime-this.toggleTime;return this.curLine>=1&&(i=this._findCur().lineTime-this._findLine(this.curLine-1).lineTime),i}_findCur(){return this.lines[this.curLine]}_findLine(i){const e=this.lines;return i<0?e[0]:i>=e.length?e[e.length-1]:e[i]}_fixLinesTime(){let i=Date.now()-this.toggleTime;this.toggleTime=Date.now(),this.lines.forEach(e=>e.lineTime+=i)}}return a});
